class Game {
	field Snake snake;
	field Apple apple;
	field int score;
	
	constructor Game new() {		
		do Screen.clearScreen();
		do Gfx.placeWall();

		// Print score
		do Output.moveCursor(2, 52);
		do Output.printString("Score: ");

		let snake = Snake.new(12, 8);
		let apple = Apple.new();
		let score = 0;
	
	 	return this;
	}

	method void dispose() {
		do apple.dispose();
		do snake.dispose();
		do Memory.deAlloc(this);

		return;
	}

	method boolean checkAppleCollision() {
		var boolean status;
		let status = false;

		if ((snake.getX() = apple.getX()) &
			(snake.getY() = apple.getY())) {
			let status = true;
		}

		return status;
	}

	method boolean checkWallCollision() {
		var boolean status;
		let status = false;
		
		// check playfield bounds
		if (snake.getX() < 0) {
			let status = true;
		}
		if (snake.getX() > 23) {
			let status = true;
		}
		if (snake.getY() < 0) {
			let status = true;
		}
		if (snake.getY() > 15) {
			let status = true;
		}
		
		return status;
	}
	
	method void updateScore() {
		let score = score + 1;
		do Output.moveCursor(2, 60);
		do Output.printInt(score);

		return;
	}

	method void run() {
		var int direction;
		var char key;
		var boolean exit;
		let exit = false;
		let direction = 0;

		while (~exit) {
			let key = Keyboard.keyPressed();
			//do Gfx.erase(snake.getX(), snake.getY());
			do snake.move(direction);
			
			if (checkWallCollision() = true) {
				let exit = true;
			} else {
				do snake.draw(direction);
				do Sys.wait(100);
			}

			if (checkAppleCollision() = true) {
				do updateScore();
				do snake.grow();
				do apple.generate();
			}

			if (key = 130) {
				let direction = 1;
			}

			if (key = 131) {
				let direction = 3;
			}

			if (key = 132) {
				let direction = 2;
			}

			if (key = 133) {
				let direction = 4;
			}
		}

		return;
	}
}